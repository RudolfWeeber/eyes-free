Braille Key Mapping Tables And Android
======================================

BrailleBack has its own keyboard mapping files for the supported braille
displays.  These are typically based on the tables from BRLTTY and modified to
support the BrailleBack commands.  The tables are stored in the subdirectory
'braille/service/tables/keytables'.  A compressed copy is stored as a zip
archive and included as a raw resource in the Android package, which is
extracted at run-time by the Braille Display service.  After editing the
key tables to add support for a new display or change existing key bindings,
the zip file needs to be regenerated before rebuilding BrailleBack as described
below.


Updating The Tables
-------------------

The key tables can be edited directly in 'braille/service/tables/keytables'.
If adding a new display, start by copying the tables from BRLTTY and
adjust them appropriately to support the BrailleBack commands.

After editing, the zipped resource needs to be regenerated and put
in the correct location.  The 'mkkeytables.sh' shell script can be used
to do this.  Just run the script like so:

$ braille/service/tables/mkkeytables.sh

...
Keyboard table archive successfully created.


BRLTTY To Android Key Mappings
------------------------------

The set of commands on Android is slightly different from what is available in
the BRLTTY built-in command set.  Many commands, however, have a reasonable
mapping, which allows most of the mapping tables to be reused on Android.  For
the definitive list of mappings, see the file
jni/brlttywrapper/BrlttyWrapper.c.  Look for the function initCommandTables.

One noteworthy case is the ROUTE command which is overloaded to support long
press and the 'activate current item' command in BrailleBack.  For displays
where down and up key events can be detected separately, BrailleBack handles
long press automatically.  For this to work properly, make sure that the
primary route key on the display (if available) binds to the ROUTE command
(without the exclamation mark that causes the command to be emitted on key
press instead of key release).  If down and up key events are not sent
separately and long press needs to be supported using a modifier key, the way
to explicitly specify a long press is using a binding to ROUTE+128.  To emit
the 'activate current item' command, bind the appropriate key to ROUTE+127 and
to generate a 'long press the current item' command, add the two values
together and create a binding for ROUTE+255.

More information about key tables can be found in the brltty manual.
